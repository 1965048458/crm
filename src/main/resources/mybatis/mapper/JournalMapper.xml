<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xuebei.crm.journal.JournalMapper">
    <resultMap id="journalMap" type="com.xuebei.crm.journal.Journal">
        <id property="journalId" column="journal_id"/>
        <result property="userId" column="user_id"/>
        <result property="type" column="type_cd"/>
        <result property="summary" column="summary"/>
        <result property="plan" column="plan"/>
        <result property="createTs" column="create_ts"/>
        <result property="hasSubmitted" column="has_submitted"/>
        <result property="readNum" javaType="java.lang.Integer" column="read_num"/>
        <association property="user" javaType="com.xuebei.crm.user.User">
            <id property="userId" column="user_id"/>
            <result column="real_nm" property="realName"/>
        </association>
    </resultMap>

    <resultMap id="visitMap" type="com.xuebei.crm.journal.VisitRecord">
        <id property="visitId" column="visit_log_id"/>
        <result property="visitType" column="visit_type"/>
        <result property="visitResult" column="visit_result"/>
        <result property="opportunityId" column="sales_opportunity_id"/>
    </resultMap>

    <resultMap id="userMap" type="com.xuebei.crm.user.User">
        <id property="userId" column="user_id"/>
        <result property="CRMUserId" column="crm_user_id"/>
        <result property="companyId" column="company_id"/>
        <result property="userType" column="user_type"/>
        <result property="realName" column="real_nm"/>
        <result property="tel" column="TEL"/>
        <result property="avatarUrl" column="avatar_url"/>
    </resultMap>

    <resultMap id="journalCustomerMap" type="com.xuebei.crm.journal.JournalCustomer">
        <id property="customerId" column="customer_id"/>
        <result property="name" column="customer_nm"/>
    </resultMap>

    <resultMap id="contactsMap" type="com.xuebei.crm.customer.Contacts">
        <id property="contactsId" column="contacts_id"/>
        <result property="realName" column="real_nm"/>
    </resultMap>

    <resultMap id="journalPatchMap" type="com.xuebei.crm.journal.JournalPatch">
        <id property="journalPatchId" column="journal_patch_id"/>
        <result property="journalId" column="journal_id"/>
        <result property="content" column="content"/>
        <result property="createTs" column="create_ts"/>
    </resultMap>
    
    <insert id="createJournal" parameterType="com.xuebei.crm.journal.Journal" useGeneratedKeys="true" keyColumn="journal_id" keyProperty="journalId">
      INSERT INTO journal (
        user_id,
        type_cd,
        plan,
        summary,
        create_ts,
        update_ts,
        has_submitted
      )
      VALUES (
        #{userId},
        #{type},
        #{plan},
        #{summary},
        NOW(),
        NOW(),
        #{hasSubmitted}
      );
    </insert>

    <select id="queryJournalById" resultMap="journalMap">
      SELECT *
      FROM journal
      WHERE journal_id = #{journalId}
    </select>

    <select id="userHasJournal" resultType="java.lang.Boolean">
      SELECT COUNT(journal_id)
      FROM journal
      WHERE journal_id = #{journalId} AND user_id = #{userId}
    </select>

    <update id="updateJournal" parameterType="com.xuebei.crm.journal.Journal">
        UPDATE journal
        SET plan = #{plan},
          summary = #{summary},
          has_submitted = #{hasSubmitted},
          update_ts = NOW()
        WHERE journal_id = #{journalId} AND user_id = #{userId}
    </update>

    <delete id="deleteJournal">
        DELETE FROM journal
        WHERE user_id = #{userId} AND journal_id = #{journalId}
    </delete>

    <delete id="deleteVisitLog">
        DELETE FROM visit_log
        WHERE journal_id = #{journalId}
    </delete>

    <insert id="insertVisitLog" parameterType="com.xuebei.crm.journal.VisitRecord" useGeneratedKeys="true" keyColumn="visit_log_id" keyProperty="visitId">
        INSERT INTO visit_log
        (visit_result, visit_type, journal_id, sales_opportunity_id)
        VALUES
            (#{visitResult}, #{visitType}, #{journalId}, #{opportunityId})
    </insert>

    <select id="queryVisitLogs" resultMap="visitMap">
        SELECT * FROM visit_log
        WHERE journal_id = #{journalId}
    </select>

    <delete id="deleteVisitContacts">
        DELETE FROM visit_contacts
        WHERE visit_log_id = #{visitId}
    </delete>

    <insert id="insertVisitContacts">
        INSERT INTO visit_contacts
        (visit_log_id, contacts_id)
        VALUES
            (#{visitId}, #{contactsId})
    </insert>

    <select id="queryVisitContacts" resultMap="contactsMap">
        SELECT contacts_id FROM visit_contacts
        WHERE visit_log_id = #{visitId}
    </select>

    <delete id="deleteJournalReceiver">
        DELETE FROM journal_receiver
        WHERE journal_id = #{journalId};
    </delete>

    <insert id="insertJournalReceiver" parameterType="map">
        INSERT INTO journal_receiver
        (journal_id, receiver_id)
        VALUES
            (#{journalId}, #{receiverId})
    </insert>

    <select id="queryJournalReceiver" resultMap="userMap">
        SELECT *
        FROM journal_receiver LEFT JOIN user_view ON journal_receiver.receiver_id = user_view.user_id
        WHERE journal_id = #{journalId}
    </select>

    <select id="isUserSameCompany" resultType="java.lang.Boolean">
        SELECT COUNT(A.user_id)
        FROM user_view AS A, user_view AS B
        WHERE A.user_id = #{userIdA} AND B.user_id = #{userIdB} AND A.company_id = B.company_id
    </select>

    <select id="queryColleagues" resultMap="userMap">
        SELECT B.user_id, B.real_nm, B.avatar_url
        FROM user_view AS A, user_view AS B
        WHERE A.company_id = B.company_id AND A.user_id = #{userId} AND B.user_id != #{userId}
    </select>

    <select id="searchMyJournal" resultMap="journalMap">
        SELECT DISTINCT j.*, u.real_nm FROM journal j
        LEFT JOIN user_view u ON j.user_id = u.user_id
        LEFT JOIN visit_log vl ON j.journal_id = vl.journal_id
        LEFT JOIN visit_contacts vc ON vl.visit_log_id = vc.visit_log_id
        LEFT JOIN contacts c ON vc.contacts_id = c.contacts_id
        LEFT JOIN contacts_type ct ON c.contacts_type_id = ct.contacts_type_id
        WHERE has_submitted = 1 AND j.user_id = #{userId}
        <if test="journalType != null">
            AND j.type_cd = #{journalType}
        </if>
        <if test="startTime != null">
            AND j.create_ts &gt; #{startTime}
        </if>
        <if test="endTime != null">
            AND j.create_ts &lt; #{endTime}
        </if>
        <if test="customer != null and customer != ''">
            AND ct.customer_id = #{customer}
        </if>
        <if test="project != null and project != ''">
            AND vl.sales_opportunity_id = #{project}
        </if>
    </select>

    <select id="searchJournal" resultMap="journalMap">
        SELECT j.*, u.real_nm FROM journal j
        INNER JOIN user_view u ON j.user_id = u.user_id
        WHERE j.journal_id = #{journalId}
    </select>

    <select id="searchUnread"  resultMap="userMap">
        SELECT  * FROM user_view u
        WHERE u.crm_user_id IN (
        SELECT j.receiver_id FROM  journal_receiver j
        WHERE j.journal_id = #{journalId} AND j.has_read = 0
        )
    </select>

    <select id="searchRead" resultMap="userMap">
        SELECT  * FROM user_view u
        WHERE u.crm_user_id IN (
        SELECT j.receiver_id FROM  journal_receiver j
        WHERE j.journal_id = #{journalId} AND j.has_read = 1
        )
    </select>


    <select id="searchReceivedJournal" resultMap="journalMap">
        SELECT distinct j.*, u.real_nm  FROM journal j
        LEFT JOIN user_view u ON j.user_id = u.user_id
        LEFT JOIN visit_log vl ON j.journal_id = vl.journal_id
        LEFT JOIN visit_contacts vc ON vl.visit_log_id = vc.visit_log_id
        LEFT JOIN contacts c ON vc.contacts_id = c.contacts_id
        LEFT JOIN contacts_type ct ON c.contacts_type_id = ct.contacts_type_id
        WHERE j.user_id != #{userId}
        AND has_submitted = 1
        <if test="journalType != null">
            AND j.type_cd = #{journalType}
        </if>
        <if test="startTime != null">
            AND j.create_ts &gt; #{startTime}
        </if>
        <if test="endTime != null">
            AND j.create_ts &lt; #{endTime}
        </if>

        AND (
        j.user_id IN
        <foreach collection="sdId" item="sender" index="i" open="(" close=")" separator=",">
            #{sender}
        </foreach>)

        <if test="customer != null and customer != ''">
            AND ct.customer_id = #{customer}
        </if>
        <if test="project != null and project != ''">
            AND vl.sales_opportunity_id = #{project}
        </if>
    </select>

    <update id="receiverDeleteJournal">
        UPDATE journal_receiver
        SET has_delete = 1
        WHERE receiver_id = #{receiverId} AND journal_id = #{journalId};
    </update>

    <insert id="insertJournalPatch">
        INSERT INTO journal_patch (
            journal_id,
            content,
            create_ts
        )
        VALUES
            (
                #{journalId},
                #{content},
                NOW()
            );
    </insert>

    <select id="findJournalDraft" resultMap="journalMap">
        SELECT *
        FROM journal
        WHERE user_id = #{userId} AND has_submitted = 0;
    </select>

    <select id="queryJournalCustomersByCompanyId" resultMap="journalCustomerMap">
        select distinct cc.* from crm_customer cc
            INNER join customer_dept cd on cd.customer_id = cc.customer_id
            INNER join enclosure_apply e on e.customer_dept_id = cd.customer_dept_id
        where e.user_id = #{userId} and e.status_cd = 'PERMITTED';
    </select>

    <select id="queryContactsByCustomerId" resultMap="contactsMap">
        SELECT * FROM contacts_view
		WHERE customer_dept_id=#{deptId};
    </select>

    <!--  <select id="searchDepts" resultMap="deptMap">
        select r2.* from
            (select r.* from
                (select d.prt_id,d.department_nm,d.customer_id,a.*,
                     (select count(*) from enclosure_apply b
                     where b.customer_dept_id = d.customer_dept_id
                           and b.user_id  != #{userId}
                           and b.status_cd = "PERMITTED"
                           and b.apply_end_ts &gt; NOW() ) as en_by_others,
                     (select count(*) from enclosure_apply b
                     where b.customer_dept_id = d.customer_dept_id
                           and b.user_id  != #{userId}
                           and b.status_cd = "APPLYING"
                           and b.apply_end_ts &gt; NOW()) as ap_by_others
                 from customer_dept d
                     inner join enclosure_apply a on d.customer_dept_id = a.customer_dept_id
                 where d.customer_id= #{customerId}
                       and a.user_id = #{userId}
                 order by a.update_ts desc) as r
            group by r.customer_dept_id) as r2
         where r2.en_by_others=0;
    </select> -->
    <select id="queryJournalPatch" resultMap="journalPatchMap">
        SELECT *
		FROM journal_patch
		WHERE journal_id = #{journalId};
    </select>

    <select id="querySubordinatesByUserId" resultType="java.lang.String">
        SELECT user_id FROM company_user
		WHERE leader_id = #{userId};
    </select>
    
    <select id="queryDeptIdByJournalId" resultType="java.lang.String">
        select p2.des_id from
            (select t2.contacts_id from
                (select r1.journal_id,r1.user_id, r2.visit_log_id
                 from journal as r1
                     inner join visit_log as r2
                         on r1.journal_id = r2.journal_id
                 where r1.journal_id = #{journalId}) as t1
                left join visit_contacts as t2
                    on t1.visit_log_id = t2.visit_log_id) as p1
            inner join
            (select t1.contacts_id,t2.customer_dept_id,t2.des_id from contacts as t1
                left join
                ((select customer_dept_id,prt_id as des_id from customer_dept
                where prt_id is not null)
                 union
                 (select customer_dept_id,customer_dept_id as des_id from customer_dept
                 where prt_id is null)) as t2
                    on t1.customer_dept_id = t2.customer_dept_id) as p2
                on p1.contacts_id = p2.contacts_id

    </select>

    <select id="queryDeptId" resultType="java.lang.String">
        select r2.customer_dept_id from enclosure_apply as r1
            inner join
            ((select customer_dept_id,customer_id,prt_id as des_id from customer_dept
            where prt_id is not null)
             union
             (select customer_dept_id,customer_id,customer_dept_id as des_id from customer_dept
             where prt_id is null)) as r2
                on r1.customer_dept_id = r2.des_id
        where r1.status_cd='PERMITTED'
              and r1.user_id = #{userId}
              and r1.apply_end_ts &gt; NOW()
              AND r2.customer_id=#{customerId};
    </select>

</mapper>